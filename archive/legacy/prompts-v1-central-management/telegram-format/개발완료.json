{
  "button_text": "개발완료",
  "description": "기획 → 구현 → 안정화 연속 실행",
  "message": "개발완료을 진행해줘.\n\n1. **기획 단계**: 구조화된 탐색-계획 루프를 통한 체계적 프로젝트 기획\n   md 확인 (있으면 읽기)\n- docs/CURRENT/status.md 확인 (있으면 읽기)\n- 이전 세션 TODO 확인\n\n**탐색 단계:**\n- 전체 구조 파악: 현재 시스템 아키텍처와 요구사항 분석\n- As-Is/To-Be/Gap 분석: 현재 상태, 목표 상태, 차이점 식별\n- 이해관계자 요구사항 수집 및 우선순위화\n\n**계획 단계:**\n- MECE 기반 작업분해(WBS): 상호배타적이고 전체포괄적인 업무 구조\n- 우선순위 매트릭스: 중요도와 긴급도 기반 작업 순서 결정\n- 리소스 및 일정 계획 수립\n\n**수렴 단계:**\n- 탐색↔계획 반복 iterative refinement\n- PRD(Product Requirements Document) 완성\n- TodoWrite를 활용한 구조화된 작업 계획 수립\n\n**💾 자동 문서화:**\n- 기획 결과를 docs/CURRENT/planning.md에 저장\n- TodoWrite 내용을 docs/CURRENT/active-todos.md에 동기화\n\n**산출물:** 구체적인 실행 계획과 성공 기준이 포함된 PRD\n\n2. **구현 단계**: DRY 원칙에 따른 체계적 구현\n   md 확인 (있으면 읽기)\n- docs/CURRENT/active-todos.md 확인 (있으면 읽기)\n\n**DRY 원칙 적용:**\n- 기존 코드 검색: Grep, Glob 도구로 유사 기능 탐색\n- 재사용 우선: 기존 라이브러리/모듈/함수 활용\n- 없으면 생성: 새로운 컴포넌트 개발 시 재사용성 고려\n\n**체계적 진행:**\n- TodoWrite 기반 단계별 구현\n- 모듈화된 코드 구조 유지\n- 코딩 컨벤션 준수 (기존 코드 스타일 분석 후 적용)\n\n**품질 보증:**\n- 단위 테스트 작성 및 실행\n- 기본 검증: 문법 체크, 타입 체크, 린트\n- 동작 확인: 핵심 기능 동작 테스트\n\n**💾 자동 문서화:**\n- 구현 진행상황을 docs/CURRENT/implementation.md에 기록\n- TodoWrite 업데이트를 docs/CURRENT/active-todos.md에 반영\n\n**산출물:** 테스트 통과하는 동작 가능한 코드\n\n3. **안정화 단계**: 구조적 지속가능성 프로토콜을 통한 시스템 안정화\n   0)**\n\n**📚 컨텍스트 자동 로딩:**\n- project_rules.md 확인 (있으면 읽기)\n- docs/CURRENT/test-report.md 확인 (이전 테스트 결과)\n\n**패러다임 전환:** 기능 중심 → **구조적 지속가능성** 중심\n\n**6단계 통합 검증 루프:**\n\n1. **Repository Structure Scan**\n   - 전체 파일 분석: 디렉토리 구조, 파일 목적성 검토\n   - 중복/임시 파일 식별 및 정리 방안 수립\n   - 파일 크기 및 복잡도 분석\n\n2. **Structural Optimization**\n   - 디렉토리 정리: 논리적 그룹핑, 계층 구조 최적화\n   - 파일 분류: 목적별, 기능별 체계적 분류\n   - 네이밍 표준화: 일관된 명명 규칙 적용\n\n3. **Dependency Resolution**\n   - Import 수정: 순환 참조 해결, 의존성 최적화\n   - 참조 오류 해결: 깨진 링크, 잘못된 경로 수정\n   - 환경 동기화: requirements, configs 일치성 확인\n\n4. **User-Centric Comprehensive Testing** ⚠️ **Mock 테스트 금지**\n   \n   **4.1 PRD 기반 실제 시나리오 테스트**\n   - 기획 단계에서 정의된 핵심 사용자 스토리를 **실제 데이터**로 검증\n   - Mock이나 가짜 데이터가 아닌 실제 운영 환경 데이터 사용 필수\n   - 각 PRD 요구사항별로 \"실제 사용자가 이 기능을 사용할 때\" 시나리오 실행\n   \n   **4.2 프로젝트 유형별 실제 테스트 실행**\n   - **웹 프로젝트**: Playwright로 실제 브라우저 E2E 테스트 필수\n     - `uv run playwright test` 또는 `npm run test:e2e` 실행\n     - 실제 사용자 클릭, 입력, 네비게이션 시뮬레이션\n     - 크로스 브라우저(Chrome, Firefox, Safari) 호환성 확인\n     - 모바일/데스크톱 반응형 테스트\n   - **API 프로젝트**: 실제 HTTP 요청으로 엔드포인트 검증\n   - **CLI 도구**: 실제 명령어 실행과 파일 시스템 테스트\n   - **데이터 처리**: 실제 데이터셋으로 파이프라인 검증\n   \n   **4.3 End-to-End 워크플로우 검증**\n   - 사용자 진입점부터 최종 목표 달성까지 전체 경로 테스트\n   - 에러 케이스와 예외 상황에서의 시스템 동작 확인\n   - 성능 병목점과 사용자 경험 저하 지점 식별\n   \n   **4.4 정량적 성능 검증 (구체적 수치 필수)**\n   - \"통과했습니다\" 금지 → 반드시 측정값 제시\n   - 웹: 페이지 로딩 시간, First Contentful Paint, Lighthouse 점수\n   - API: 평균 응답시간, 처리량(RPS), 99th percentile 응답시간\n   - 메모리 사용량, CPU 사용률, 동시 사용자 처리 능력\n   - PRD에서 정의한 성능 목표 대비 실제 측정값 비교\n\n5. **Documentation Sync**\n   - CLAUDE.md 반영: 변경사항 문서화\n   - README 업데이트: 사용법, 설치법 최신화\n   - .gitignore 정리: 불필요한 파일 제외 규칙 정비\n\n6. **Quality Assurance**\n   - MECE 분석: 빠진 것은 없는지, 중복은 없는지 확인\n   - 성능 벤치마크: 기준 성능 대비 측정\n   - 정량 평가: 실제 코드 커버리지, 복잡도, 품질 지표\n\n**예방적 관리 트리거:**\n- 루트 20개 파일 이상\n- 임시 파일 5개 이상\n- Import 오류 3개 이상\n→ 자동 안정화 프로세스 실행\n\n**💾 자동 문서화:**\n- 테스트 결과를 docs/CURRENT/test-report.md에 기록\n- 성능 측정값을 구체적 수치와 함께 저장\n\n**산출물:** 실제 사용자 시나리오에서 검증된 지속가능하고 확장 가능한 코드베이스"
}