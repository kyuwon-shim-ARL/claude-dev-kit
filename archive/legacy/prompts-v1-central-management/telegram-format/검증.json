{
  "button_text": "@검증",
  "description": "심화 검증 및 테스트를 통한 품질 보증",
  "message": "🔍 **검증 (Deep Verification & Testing)**\n\n**📚 컨텍스트 자동 로딩:**\n- project_rules.md 확인 (있으면 읽기)\n- docs/CURRENT/status.md 확인 (있으면 읽기)\n- 이전 테스트 결과 확인\n\n**1단계: 기획 의도 매트릭스 검증**\n- project_rules.md의 모든 원칙 체크\n- 각 원칙별 실제 구현 상태 매핑\n- 기획 의도 충실도 점수 계산 (0-100)\n- 불일치 항목 구체적 리스트업\n\n**2단계: 다층 시나리오 테스트**\n- Level 1: Happy Path - 기본 성공 경로 테스트\n- Level 2: Edge Cases - 경계값, 예외 상황 처리\n- Level 3: Stress Test - 대용량 데이터, 동시성 테스트\n- Level 4: Error Handling - 의도적 실패 유발 및 복구\n- Level 5: User Journey - 실제 사용자 전체 워크플로우\n\n**3단계: 정량적 성능 프로파일링**\n- 각 명령어/기능별 실행 시간 측정\n- 메모리 사용량 추이 분석\n- 파일 I/O 패턴 및 병목 구간 탐지\n- 네트워크 의존성 및 타임아웃 처리 검증\n- CPU 사용률 및 리소스 효율성 평가\n\n**4단계: 코드 품질 심층 분석**\n- 중복 코드 탐지 (DRY 원칙 위반)\n- 순환 의존성 검사\n- 사용하지 않는 코드/파일 식별\n- 보안 취약점 스캔\n- 테스트 커버리지 측정\n\n**5단계: 문서 일관성 검증**\n- README와 실제 기능 일치 여부\n- CLAUDE.md의 명령어와 실제 설치된 명령어 비교\n- API 문서와 실제 엔드포인트 매칭\n- 주석과 코드 동기화 상태\n\n**6단계: 개선 제안 생성**\n- 발견된 문제별 우선순위 설정\n- 각 문제에 대한 구체적 해결 방안 제시\n- 예상 개선 효과 정량화\n- 즉시 적용 가능한 Quick Win 식별\n\n**💾 자동 문서화:**\n- 검증 결과를 docs/CURRENT/verification-report.md에 저장\n- 개선 사항을 docs/CURRENT/improvement-backlog.md에 기록\n\n**📊 산출물: 종합 검증 리포트 (점수 및 개선안 포함)**"
}