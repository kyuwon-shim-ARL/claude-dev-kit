{
  "version": "2.0",
  "last_updated": "2025-08-18",
  "description": "Claude Dev Kit 중앙 프롬프트 저장소 - 텔레그램 claude-ops 검증된 프롬프트 기반",
  "prompts": {
    "기획": {
      "title": "Structured Discovery & Planning Loop",
      "description": "구조화된 탐색-계획 루프를 통한 체계적 프로젝트 기획",
      "text": "🎯 **기획 (Structured Discovery & Planning Loop)**\n\n**탐색 단계:**\n- 전체 구조 파악: 현재 시스템 아키텍처와 요구사항 분석\n- As-Is/To-Be/Gap 분석: 현재 상태, 목표 상태, 차이점 식별\n- 이해관계자 요구사항 수집 및 우선순위화\n\n**계획 단계:**\n- MECE 기반 작업분해(WBS): 상호배타적이고 전체포괄적인 업무 구조\n- 우선순위 매트릭스: 중요도와 긴급도 기반 작업 순서 결정\n- 리소스 및 일정 계획 수립\n\n**수렴 단계:**\n- 탐색↔계획 반복 iterative refinement\n- PRD(Product Requirements Document) 완성\n- TodoWrite를 활용한 구조화된 작업 계획 수립\n\n**산출물:** 구체적인 실행 계획과 성공 기준이 포함된 PRD"
    },
    "구현": {
      "title": "Implementation with DRY",
      "description": "DRY 원칙에 따른 체계적 구현",
      "text": "⚡ **구현 (Implementation with DRY)**\n\n**DRY 원칙 적용:**\n- 기존 코드 검색: Grep, Glob 도구로 유사 기능 탐색\n- 재사용 우선: 기존 라이브러리/모듈/함수 활용\n- 없으면 생성: 새로운 컴포넌트 개발 시 재사용성 고려\n\n**체계적 진행:**\n- TodoWrite 기반 단계별 구현\n- 모듈화된 코드 구조 유지\n- 코딩 컨벤션 준수 (기존 코드 스타일 분석 후 적용)\n\n**품질 보증:**\n- 단위 테스트 작성 및 실행\n- 기본 검증: 문법 체크, 타입 체크, 린트\n- 동작 확인: 핵심 기능 동작 테스트\n\n**산출물:** 테스트 통과하는 동작 가능한 코드"
    },
    "안정화": {
      "title": "Structural Sustainability Protocol v2.0",
      "description": "구조적 지속가능성 프로토콜을 통한 시스템 안정화",
      "text": "🔧 **안정화 (Structural Sustainability Protocol v2.0)**\n\n**패러다임 전환:** 기능 중심 → **구조적 지속가능성** 중심\n\n**6단계 통합 검증 루프:**\n\n1. **Repository Structure Scan**\n   - 전체 파일 분석: 디렉토리 구조, 파일 목적성 검토\n   - 중복/임시 파일 식별 및 정리 방안 수립\n   - 파일 크기 및 복잡도 분석\n\n2. **Structural Optimization**\n   - 디렉토리 정리: 논리적 그룹핑, 계층 구조 최적화\n   - 파일 분류: 목적별, 기능별 체계적 분류\n   - 네이밍 표준화: 일관된 명명 규칙 적용\n\n3. **Dependency Resolution**\n   - Import 수정: 순환 참조 해결, 의존성 최적화\n   - 참조 오류 해결: 깨진 링크, 잘못된 경로 수정\n   - 환경 동기화: requirements, configs 일치성 확인\n\n4. **Comprehensive Testing**\n   - 모듈 검증: 각 모듈별 단위 테스트\n   - API 테스트: 인터페이스 동작 확인\n   - 시스템 무결성 확인: 전체 시스템 통합 테스트\n\n5. **Documentation Sync**\n   - CLAUDE.md 반영: 변경사항 문서화\n   - README 업데이트: 사용법, 설치법 최신화\n   - .gitignore 정리: 불필요한 파일 제외 규칙 정비\n\n6. **Quality Assurance**\n   - MECE 분석: 빠진 것은 없는지, 중복은 없는지 확인\n   - 성능 벤치마크: 기준 성능 대비 측정\n   - 정량 평가: 코드 커버리지, 복잡도, 품질 지표\n\n**예방적 관리 트리거:**\n- 루트 20개 파일 이상\n- 임시 파일 5개 이상\n- Import 오류 3개 이상\n→ 자동 안정화 프로세스 실행\n\n**산출물:** 지속가능하고 확장 가능한 깔끔한 코드베이스"
    },
    "배포": {
      "title": "Deployment",
      "description": "프로덕션 배포를 위한 최종 검증 및 배포",
      "text": "🚀 **배포 (Deployment)**\n\n**최종 검증:**\n- 체크리스트 완료 확인: 모든 TODO 완료, 테스트 통과\n- 코드 리뷰: 보안, 성능, 코딩 표준 최종 점검\n- 배포 전 시나리오 테스트: 프로덕션 환경 시뮬레이션\n\n**구조화 커밋:**\n- 의미있는 커밋 메시지: 변경사항의 목적과 영향 명시\n- 원자성 보장: 하나의 논리적 변경사항 = 하나의 커밋\n- 관련 이슈/티켓 링크: 추적가능성 확보\n\n**원격 배포:**\n- 푸시: origin 저장소로 변경사항 전송\n- 버전 태깅: semantic versioning (major.minor.patch)\n- 배포 스크립트 실행: CI/CD 파이프라인 트리거\n\n**배포 후 모니터링:**\n- 서비스 상태 확인: 헬스체크, 로그 모니터링\n- 성능 지표 추적: 응답시간, 처리량, 오류율\n- 롤백 준비: 문제 발생 시 즉시 이전 버전으로 복구\n\n**산출물:** 안정적으로 운영되는 프로덕션 서비스"
    }
  }
}