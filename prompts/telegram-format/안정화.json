{
  "button_text": "@안정화",
  "description": "구조적 지속가능성 프로토콜을 통한 시스템 안정화",
  "message": "🔧 **안정화 (Structural Sustainability Protocol v2.0)**\n\n**패러다임 전환:** 기능 중심 → **구조적 지속가능성** 중심\n\n**6단계 통합 검증 루프:**\n\n1. **Repository Structure Scan**\n   - 전체 파일 분석: 디렉토리 구조, 파일 목적성 검토\n   - 중복/임시 파일 식별 및 정리 방안 수립\n   - 파일 크기 및 복잡도 분석\n\n2. **Structural Optimization**\n   - 디렉토리 정리: 논리적 그룹핑, 계층 구조 최적화\n   - 파일 분류: 목적별, 기능별 체계적 분류\n   - 네이밍 표준화: 일관된 명명 규칙 적용\n\n3. **Dependency Resolution**\n   - Import 수정: 순환 참조 해결, 의존성 최적화\n   - 참조 오류 해결: 깨진 링크, 잘못된 경로 수정\n   - 환경 동기화: requirements, configs 일치성 확인\n\n4. **Comprehensive Testing**\n   - 모듈 검증: 각 모듈별 단위 테스트\n   - API 테스트: 인터페이스 동작 확인\n   - 시스템 무결성 확인: 전체 시스템 통합 테스트\n\n5. **Documentation Sync**\n   - CLAUDE.md 반영: 변경사항 문서화\n   - README 업데이트: 사용법, 설치법 최신화\n   - .gitignore 정리: 불필요한 파일 제외 규칙 정비\n\n6. **Quality Assurance**\n   - MECE 분석: 빠진 것은 없는지, 중복은 없는지 확인\n   - 성능 벤치마크: 기준 성능 대비 측정\n   - 정량 평가: 코드 커버리지, 복잡도, 품질 지표\n\n**예방적 관리 트리거:**\n- 루트 20개 파일 이상\n- 임시 파일 5개 이상\n- Import 오류 3개 이상\n→ 자동 안정화 프로세스 실행\n\n**산출물:** 지속가능하고 확장 가능한 깔끔한 코드베이스"
}