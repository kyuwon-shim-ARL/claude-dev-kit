{
  "button_text": "@극한검증",
  "description": "자동 반복 개선을 통한 극한의 품질 달성",
  "message": "🚀 **극한검증 (Ultimate Verification with Auto-improvement)**\n\n**📚 컨텍스트 자동 로딩:**\n- project_rules.md 확인 (있으면 읽기)\n- docs/CURRENT/status.md 확인 (있으면 읽기)\n- 이전 검증 이력 분석\n\n**🔄 자동 반복 개선 프로세스**\n\n반복 조건:\n- 최대 반복: 5회\n- 목표 점수: 95/100\n- 수렴 판정: 개선율 < 2%\n- 시간 제한: 10분\n\n**Phase 1: 심화 검증 실행**\n/검증 명령어의 모든 단계 실행:\n1. 기획 의도 매트릭스 검증\n2. 다층 시나리오 테스트 (Level 1-5)\n3. 정량적 성능 프로파일링\n4. 코드 품질 심층 분석\n5. 문서 일관성 검증\n6. 개선 제안 생성\n\n**Phase 2: 자동 개선 적용**\n\n**2.1 즉시 수정 (Automatic Fix)**\n- 코드 포맷팅 오류 → 자동 포맷팅 적용\n- 사용하지 않는 import → 자동 제거\n- 누락된 타입 힌트 → 자동 추가\n- 간단한 린트 오류 → 자동 수정\n- 문서 불일치 → 자동 동기화\n\n**2.2 구조 개선 (Refactoring)**\n- 중복 코드 → 함수/모듈로 추출\n- 긴 함수 → 작은 단위로 분할\n- 복잡한 조건문 → 가독성 개선\n- 매직 넘버 → 상수로 변환\n\n**2.3 성능 최적화 (Optimization)**\n- 비효율적 루프 → 최적화된 알고리즘\n- 불필요한 I/O → 캐싱 적용\n- 동기 처리 → 비동기 전환 (가능시)\n- 메모리 누수 → 자원 정리 코드 추가\n\n**Phase 3: 개선 효과 측정 및 수렴 판정**\n- 점수 변화 측정\n- 개선율 계산\n- 목표 달성 여부 확인\n- 다음 라운드 진행 결정\n\n**💾 자동 문서화:**\n- 각 라운드 결과를 docs/CURRENT/extreme-verification-log.md에 기록\n- 최종 결과를 docs/CURRENT/final-quality-report.md에 저장\n- 적용된 모든 개선 사항 추적\n\n**📊 산출물: 극한 검증 완료 리포트 (최종 품질 인증)**\n\n⚠️ 주의: 모든 자동 수정은 안전한 변경만 적용하며, git diff로 추적 가능"
}